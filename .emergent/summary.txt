<analysis>
The previous AI engineer successfully initiated a complex trading intelligence platform. The initial phase focused heavily on backend development, implementing core market regime analysis (MSAE) and the ETF regime engine. Key technical decisions included using FastAPI with MongoDB, yfinance for data, and adopting a backend-first, additive-only development approach to avoid breaking existing functionality. The engineer demonstrated careful adherence to user requirements for data models, API contracts, and specific calculation logic. Challenges arose from the  file becoming very large, leading to linting issues and necessitating a refactor into a separate router module for new endpoints. At the point of this summary, the majority of the backend features are completed and tested, with a few critical modules still being finalized, and the entire frontend implementation pending.
</analysis>

<product_requirements>
The goal is to deliver a production-ready trading intelligence platform, replacing spreadsheet workflows with a backend-first system and an editable UI. All calculations must be auto-calculated, auditable, and user-configurable.

**Core Workflow (Steps 1-5):**
*   **Step 1 — Market Regime & Situational Awareness (MSAE):** Daily/15-min regime score and label computation. Inputs: QQQ close, EMA(20/50), distance from ATH (%), ADX(14), ATR(14), ATR%, VIX, VXN, Breadth proxy (% of Nasdaq-100 components > 50-DMA). Outputs:  (UPTREND | DOWNTREND | CHOP),  (0-100) with component breakdown. Snapshots time-stamped and persisted. Default thresholds (EMA, ADX, ATR, Chop detection) must be user-editable.
*   **Step 2 — Universe, Rotation & “Neglected Pre-Earnings” Scanner:** Single canonical universe (ETFs + equities) with tags and screens. Screens (server-side, parameterized): Leaders/Momentum (top N by 4-factor rank), Neglected Pre-Earnings (specific criteria: rolling 21-day return ≤ 0%, 63-day slope ≈ flat, quiet ATR%, price near flat 20-DMA, earnings 7-14 trading days out). Trigger: volume spike or first close > 20-DMA. Output label: WATCH | READY. All thresholds user-editable.
*   **Step 3 — Portfolio Construction, Sizing & Stops:** Position/risk engine with ATR-based sizing and mechanical stops. Fields: symbol, entry_date, entry_price, shares, strategy_tag, risk_perc, atr_at_entry, stop_type (FIXED|ATR_TRAIL|PCT), trail_mult, hard_stop, status (OPEN|CLOSED), notes. Server computes: initial stop, live trailing stop, live R multiple, breach flags. Sizing defaults (editable): Risk per position (0.5-1.0%), ATR-trail (3x ATR), position cap (15% equity), max leverage (100%).
*   **Step 4 — Journal & Post-Trade Review:** Every buy/sell stored as a trade with context. Fields: symbol, side, ts, price, shares, fee, regime_at_entry, msae_score_at_entry, setup_tag, outcome_metrics (R, hold_days), notes. Views: Win rate by regime/setup/ATR, “Three-strikes” auto-flag, Monthly P/L attribution.
*   **Step 5 — ETF Regime Engine (TQQQ / SQQQ / QQQI):** Mechanical router allocating among TQQQ (long), SQQQ (inverse), QQQI (income - specifically NEOS Nasdaq-100 High Income ETF) based on Step-1 regime. Signals derived from QQQ. Rules: UPTREND (QQQ > EMA20 AND EMA20 > EMA50 AND ADX > threshold) for N consecutive closes → TQQQ; inverse → SQQQ; CHOP (ADX < threshold OR EMA whipsaws) → QQQI (or OUT). Safety rules: Flip buffer (N=2), Decay guard (both TQQQ/SQQQ 10-day returns < 0), Volatility guard (ATR% > cap or intraday > cap). Outputs: decision, weights, confidence, reason, params_version. Advanced: “Short-both decay” (OFF by default).

**Implementation Done So Far:**
*   **Backend (FastAPI + MongoDB)**: All of Step 1 and Step 5 core logic and endpoints implemented and tested. This includes market state snapshots, regime calculation, ETF decisioning with all specified guards (flip buffer, decay, volatility, staleness), decision persistence with versioning, and default formula configurations. NDX constituent management (GET/POST/diff/refresh-prices) and universe/screens (leaders, neglected pre-earnings) are also implemented. Backtest endpoint for ETF Regime Engine is functional. Exports (Excel/CSV) scaffolding is in place.
*   **Frontend (React)**: No specific UI implementation has been done yet, as the focus has been on backend completion.
</product_requirements>

<key_technical_concepts>
- **FastAPI**: Python web framework for backend APIs.
- **MongoDB**: NoSQL database for data persistence.
- **React**: JavaScript library for frontend UI.
- **yfinance**: Python library for fetching financial market data.
- **Pandas**: Data manipulation library for indicator computation (EMA, ADX, ATR).
- **JWT Authentication**: Security for API access.
- **APScheduler**: Python library for scheduling background jobs.
- **exchange_calendars**: For robust market calendar handling.
- **SendGrid**: Planned integration for email notifications.
- **Additive Development**: New features integrated without altering existing ones.
</key_technical_concepts>

<code_architecture>
The application has a full-stack architecture with separate backend and frontend repositories.

**Directory Structure:**


**Key Backend Files and Components:**

*   ****:
    *   **Importance**: This is the core FastAPI application file, serving as the main entry point for the backend. It defines and registers the primary API routes and handles fundamental application logic, including database connections and middleware. It's explicitly noted as extremely large and active.
    *   **Changes Made**: Significant additions have been made here. This file now contains the implementations for:
        *   **Market State (MSAE) calculations**: Logic for EMA, ADX, ATR%, distance from ATH, breadth (% NDX > 50-DMA), and regime labeling.
        *   **ETF Regime Engine logic**: Decision-making (TQQQ/SQQQ/QQQI/OUT), flip buffer, decay and volatility guards.
        *   **Persistence**: Handlers for saving  snapshots and  (with ).
        *   **New Endpoints**: Routes for , , , , , , , , , , , and .
        *   **Data Models**: Pydantic models for new data structures (e.g., , , ).
    *   **Future Plan**: The AI engineer plans to refactor remaining new routes into a separate router module to manage 's size and avoid linting conflicts.

*   ****:
    *   **Importance**: Lists all Python dependencies required for the backend.
    *   **Changes Made**: New libraries like , , and  have been added to support scheduler functionality and Excel exports.  is also listed.

*   **MongoDB Collections (Logical/Implicit)**:
    The following new collections (or modifications to existing ones) are used:
    *   : Stores time-stamped snapshots of market conditions and MSAE scores.
    *   : Stores versioned parameters for various modules, specifically  configurations.
    *   : Records ETF regime decisions and their history, with .
    *   : Stores the Nasdaq-100 constituent list for breadth calculation (single authoritative document model  is preferred, with versioning and archiving).
    *   : Stores historical price data (EOD/15m) for active NDX symbols, keyed by .
    *   : Planned for canonical universe of ETFs + equities.
    *   : Planned for portfolio positions and risk tracking.
    *   : Planned for journal entries of buys/sells.

**Frontend Files:**
*   ****:
    *   **Importance**: An existing React component that consumes backend data, specifically from .
    *   **Changes Made**: No direct changes to this file were reported, as the AI engineer focused on backend additive changes to avoid breaking existing UI functionality. The legacy  endpoint remains untouched for this component.

**Overall Architectural Decisions:**
*   **Backend-First Development**: Prioritized implementing all backend logic and APIs before touching the frontend.
*   **Additive-Only Changes**: Ensured no existing endpoints or functionalities were broken by new additions.
*   **API Prefixing**: All new backend API routes strictly follow the  prefix for Kubernetes ingress rules.
*   **Environment Variable Usage**: Strict adherence to using  and  from environment variables, avoiding hardcoding.
*   **UUIDs for IDs**: Avoids MongoDB's  exposure for better JSON serialization.
*   **Batch Processing for Data**: Used  with grouped tickers for efficient data fetching, especially for NDX constituents.
</code_architecture>

<pending_tasks>
- **Positions & Trades (Step 3/4)**: Implement GET/POST/PATCH for positions and GET/POST for trades, with server-computed live trailing stop and R.
- **Param Editor/Versioning**: Implement POST /api/formulas/preview, /api/formulas/config/publish, and /api/formulas/config/revert.
- **Scheduler**: Finalize APScheduler integration with US market calendar for 15-min RTH refresh and nightly exports.
- **Role Enforcement**: Implement admin-only guards on mutating routes (universe import, NDX POSTs, positions/trades, formulas publish/revert).
- **SendGrid Email Integration**: Wire up the SendGrid email sending for nightly reports (awaiting API key).
- **Frontend UI**: Implement all five panels (Regime, ETF Engine, Leaders/Screens, Portfolio & Risk, Journal), including param editor and inline backtest UI.
- **QA/CI/Docs**: Finalize unit tests, API tests, backtest sanity checks, staleness simulation, CI setup, README, parameter guide, and API reference.
</pending_tasks>

<current_work>
The previous AI engineer has completed the core backend functionality for the trading intelligence platform. This includes:
*   **Market Regime & Situational Awareness (MSAE)**: The backend successfully computes daily and 15-minute regime scores, labels (UPTREND/DOWNTREND/CHOP), and component breakdowns (EMA, ADX, ATR%, VIX, VXN, breadth from Nasdaq-100 constituents, distance from ATH). It also includes a staleness guard and persists these snapshots via GET  and GET .
*   **ETF Regime Engine (TQQQ/SQQQ/QQQI)**: The engine makes decisions (TQQQ/SQQQ/QQQI/OUT) based on the MSAE regime, incorporating flip buffer, decay guard, and volatility guard logic. Decisions are persisted with confidence, reasons, and a . This is exposed via GET .
*   **Formula Configurations**: The backend now seeds and serves  specific configurations via GET , and a combined list of all configurations via GET . The legacy  endpoint remains untouched for existing UI compatibility.
*   **Backtesting**: A backtest endpoint, POST , is implemented, capable of returning equity curve, total return, max drawdown, Sharpe ratio, number of flips, P/L by regime, decisions, and  for a given historical period (requires ≥60 days).
*   **NDX Admin**: Endpoints for managing Nasdaq-100 constituents are live: GET  (with  option), POST  (for upserting versioned authoritative docs), GET , and POST  for batch yfinance data fetching.
*   **Universe & Screens (Step 2)**: Core endpoints are functional: GET , POST , GET  (for top N by rank), and GET  (returning WATCH/READY labels based on criteria).
*   **Exports**: Endpoints for generating precomputed data exports are in place: GET  (XLSX) and GET  (CSV bundle).
*   **Stability and Compatibility**: All new routes are prefixed with  and use environment variables for URLs. Existing functionality is preserved. Dependencies (, , ) have been added. Backend tests for all delivered features are passing.

**Currently, the AI engineer is actively finalizing the remaining backend pieces:**
*   **Positions & Trades (Step 3/4)**: Implementing GET/POST/PATCH for  (including server-computed live trailing stop and live R) and GET/POST for .
*   **Param Editor/Versioning**: Implementing POST , POST , and POST .
*   **Scheduler Scaffold**: Setting up the APScheduler with  for 15-minute RTH data refreshes and nightly exports, with the SendGrid email integration stubbed for later.
*   **Role Enforcement**: Implementing admin-only access control for mutating routes (e.g., universe import, NDX POSTs, positions/trades, formulas publish/revert).

The primary challenge encountered has been the large size and active development of , which caused linting conflicts during insertions. The AI engineer is addressing this by planning to implement remaining routes in a separate router module to ensure a clean and non-breaking integration.
</current_work>

<optional_next_step>
After finalizing and testing the remaining backend components (Positions/Trades, Param Editor, Scheduler, Roles), the immediate next step is to begin wiring the thin frontend panels for Regime and ETF Engine.
</optional_next_step>
